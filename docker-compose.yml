# ─────────────────────────────────────────────────────
# your existing services section…
services:
  monitor-api:
    build: ./backend
    ports:
      - "8080:8000"
    environment:
      DATABASE_URL: postgresql://watchdog:watchdog@postgres:5432/watchdog
    depends_on:
      - postgres
    networks:
      - watchdog_net
    volumes:
      - ./backend:/app

  celery-worker:
    build: ./backend
    command: celery -A app.tasks worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://watchdog:watchdog@postgres:5432/watchdog
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - watchdog_net
    volumes:
      - ./backend:/app

  redis:
    image: redis:7
    networks:
      - watchdog_net

  postgres:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: watchdog
      POSTGRES_PASSWORD: watchdog
      POSTGRES_DB: watchdog
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - watchdog_net

  monitor-ui:
    build: ./frontend
    ports:
      - "5173:5173"
    networks:
      - watchdog_net
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true

  # ─────────────────────────────────────────────────────
  # Dummy Linux Machines for Testing
  # ─────────────────────────────────────────────────────
  
  # Web Server 1 - Ubuntu with Apache
  web-server-1:
    image: ubuntu:22.04
    hostname: web-server-1
    ports:
      - "2221:22"  # SSH
      - "8081:80"  # HTTP
    environment:
      - ROOT_PASSWORD=password123
    networks:
      - watchdog_net
    volumes:
      - ./dummy-machines/web-server-1:/root
    command: >
      bash -c "
        apt-get update && apt-get install -y openssh-server apache2 curl htop iotop net-tools iputils-ping
        && mkdir -p /var/run/sshd
        && echo 'root:$$ROOT_PASSWORD' | chpasswd
        && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        && echo '<html><body><h1>Web Server 1 - Ubuntu 22.04</h1><p>This is a dummy machine for testing</p></body></html>' > /var/www/html/index.html
        && service apache2 start
        && /usr/sbin/sshd -D
      "

  # Database Server - CentOS with MySQL
  db-server-1:
    image: centos:7
    hostname: db-server-1
    ports:
      - "2222:22"  # SSH
      - "3306:3306"  # MySQL
    environment:
      - ROOT_PASSWORD=password123
    networks:
      - watchdog_net
    volumes:
      - ./dummy-machines/db-server-1:/root
    command: >
      bash -c "
        yum update -y && yum install -y openssh-server openssh-clients mysql-server curl htop iotop net-tools iputils
        && mkdir -p /var/run/sshd
        && echo 'root:$$ROOT_PASSWORD' | chpasswd
        && sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config
        && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        && systemctl start mysqld
        && systemctl enable mysqld
        && /usr/sbin/sshd -D
      "

  # Application Server - Debian with Node.js
  app-server-1:
    image: debian:11
    hostname: app-server-1
    ports:
      - "2223:22"  # SSH
      - "3000:3000"  # Node.js app
    environment:
      - ROOT_PASSWORD=password123
    networks:
      - watchdog_net
    volumes:
      - ./dummy-machines/app-server-1:/root
    command: >
      bash -c "
        apt-get update && apt-get install -y openssh-server curl htop iotop net-tools iputils-ping nodejs npm
        && mkdir -p /var/run/sshd
        && echo 'root:$$ROOT_PASSWORD' | chpasswd
        && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        && npm install -g http-server
        && echo 'console.log(\"App Server 1 - Debian 11\"); http.createServer((req, res) => { res.writeHead(200, {\"Content-Type\": \"text/html\"}); res.end(\"<h1>App Server 1 - Debian 11</h1><p>This is a dummy machine for testing</p>\"); }).listen(3000);' > /root/app.js
        && node /root/app.js &
        && /usr/sbin/sshd -D
      "

  # Load Balancer - Alpine Linux with Nginx
  lb-server-1:
    image: alpine:latest
    hostname: lb-server-1
    ports:
      - "2224:22"  # SSH
      - "8082:80"  # Nginx
    environment:
      - ROOT_PASSWORD=password123
    networks:
      - watchdog_net
    volumes:
      - ./dummy-machines/lb-server-1:/root
    command: >
      sh -c "
        apk update && apk add openssh nginx curl htop iotop net-tools iputils
        && mkdir -p /var/run/sshd
        && echo 'root:$$ROOT_PASSWORD' | chpasswd
        && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        && echo '<html><body><h1>Load Balancer - Alpine Linux</h1><p>This is a dummy machine for testing</p></body></html>' > /var/www/localhost/htdocs/index.html
        && nginx
        && /usr/sbin/sshd -D
      "

  # Monitoring Server - Ubuntu with Prometheus-like tools
  monitoring-server-1:
    image: ubuntu:20.04
    hostname: monitoring-server-1
    ports:
      - "2225:22"  # SSH
      - "9090:9090"  # Prometheus-like port
    environment:
      - ROOT_PASSWORD=password123
    networks:
      - watchdog_net
    volumes:
      - ./dummy-machines/monitoring-server-1:/root
    command: >
      bash -c "
        apt-get update && apt-get install -y openssh-server curl htop iotop net-tools iputils-ping python3 python3-pip
        && mkdir -p /var/run/sshd
        && echo 'root:$$ROOT_PASSWORD' | chpasswd
        && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        && pip3 install flask
        && echo 'from flask import Flask; app = Flask(__name__); @app.route(\"/\"); def home(): return \"<h1>Monitoring Server - Ubuntu 20.04</h1><p>This is a dummy machine for testing</p>\"; app.run(host=\"0.0.0.0\", port=9090)' > /root/monitor.py
        && python3 /root/monitor.py &
        && /usr/sbin/sshd -D
      "

volumes:
  pgdata:

networks:
  watchdog_net:
    name: watchdog_net
    driver: bridge

